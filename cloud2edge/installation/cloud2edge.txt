#!/bin/bash

# Prerequisites: Ensure the following tools are installed
# Docker:       https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
# kubectl:      https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management
# Minikube:     https://minikube.sigs.k8s.io/docs/start/?arch=%2Flinux%2Fx86-64%2Fstable%2Fbinary+download
# Helm:         https://helm.sh/docs/intro/install/

# Step 1: Add Eclipse IoT Helm repository
helm repo add eclipse-iot https://eclipse.org/packages/charts
helm repo update

# Step 2: Configure Docker to run without sudo
sudo usermod -aG docker $USER
newgrp docker  # Apply changes

##########################################################
# Step 3: Start Minikube with sufficient resources
minikube start --cpus 4 --disk-size 40gb --memory 12288 -p opentwins

# Alternatively, with less memory
# minikube start --cpus 4 --disk-size 40gb --memory 8192 -p opentwins

# Define variables
NS="opentwins"         # Namespace
RELEASE="c2e"          # Helm release name

# Step 4: Create Kubernetes namespace
kubectl create namespace $NS

# Optional: Tunnel Minikube to expose services with LoadBalancer
minikube tunnel -p opentwins

# Step 5: Deploy Cloud2Edge components using Helm
helm install -n $NS --wait --timeout 20m \
  --set hono.useLoadBalancer=true \
  --set hono.kafka.externalAccess.broker.service.type=LoadBalancer \
  --set hono.kafka.externalAccess.controller.service.type=LoadBalancer \
  --set ditto.nginx.service.type=LoadBalancer \
  $RELEASE eclipse-iot/cloud2edge --debug

# Alternative Helm install without LoadBalancer settings
# helm install -n $NS --wait --timeout 20m $RELEASE eclipse-iot/cloud2edge --debug

##########################################################
# Step 6: Manage Kubernetes and Minikube resources
minikube -p opentwins ssh -- sudo docker stats --no-stream  # Check container stats
kubectl get pods -n $NS                                    # List all pods
kubectl get services -n $NS                                # List all services

# Delete resources (as examples)
kubectl delete deployment new-telegraf -n $NS
kubectl delete pod new-telegraf-56cb64b5c6-9n5gr -n $NS

# Restart or delete Minikube cluster
minikube stop -p opentwins
minikube start -p opentwins
minikube delete -p opentwins

###########################################################
# Step 7: Configure Cloud2Edge environment variables
curl https://www.eclipse.org/packages/packages/cloud2edge/scripts/setCloud2EdgeEnv.sh \
  --output setCloud2EdgeEnv.sh
chmod u+x setCloud2EdgeEnv.sh

TRUSTSTORE_PATH="/tmp/c2e_hono_truststore.pem"
eval $(./setCloud2EdgeEnv.sh $RELEASE $NS $TRUSTSTORE_PATH)

###########################################################
# Step 8: Install and configure Nginx for HTTP/HTTPS reverse proxy
sudo apt-get update
sudo apt-get install nginx -y

# Configure Ditto Nginx reverse proxy
sudo nano /etc/nginx/sites-available/c2e-ditto-nginx

# Example Nginx configuration for Ditto
<<DITTO_CONFIG
server {
    listen 80;
    server_name 34.132.8.167;

    location / {
        proxy_pass http://192.168.49.2:31315;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
DITTO_CONFIG

sudo ln -sf /etc/nginx/sites-available/c2e-ditto-nginx /etc/nginx/sites-enabled/
sudo nginx -t  # Test configuration
sudo systemctl restart nginx

###########################################################
# Step 9: Test Hono HTTP Adapter with a curl command
curl -i -k -u demo-device@org.eclipse.packages.c2e:demo-secret -H 'Content-Type: application/json' --data-binary '{
  "topic": "org.eclipse.packages.c2e/demo-device/things/twin/commands/modify",
  "headers": {},
  "path": "/features/temperature/properties/value",
  "value": 45
}' http://34.42.82.181:8080/telemetry

###########################################################
# Step 10: Device registry example
sudo nano /etc/nginx/sites-available/c2e-hono-service-device-registry-ext

# Example Nginx configuration for device registry
<<DEVICE_REGISTRY_CONFIG
server {
    listen 8085;
    server_name 34.42.82.181;

    location / {
        proxy_pass https://192.168.49.2:31443;
        proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        proxy_ssl_verify off;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
DEVICE_REGISTRY_CONFIG

sudo ln -sf /etc/nginx/sites-available/c2e-hono-service-device-registry-ext /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx

###########################################################
# Step 11: MQTT with Mosquitto client
# Extract the CA certificate for secure communication
kubectl get configmaps --namespace $NS ${RELEASE}-hono-example-trust-store --template="{{index .data \"ca.crt\"}}" > "ca.crt"

# Publish telemetry message
mosquitto_pub -d -h 34.42.82.181 -p 8883 -u demo-device@org.eclipse.packages.c2e -P demo-secret --cafile ./ca.crt --insecure -t telemetry -m '{
  "topic": "org.eclipse.packages.c2e/demo-device/things/twin/commands/modify",
  "headers": {},
  "path": "/features/temperature/properties/value",
  "value": 45
}'

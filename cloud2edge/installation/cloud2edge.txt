1. Prerequisites
    1. docker (https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository)
    2. kubectl (https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management)
    3. minikube (https://minikube.sigs.k8s.io/docs/start/?arch=%2Flinux%2Fx86-64%2Fstable%2Fbinary+download)
    4. helm (https://helm.sh/docs/intro/install/

NS=opentwins
RELEASE=c2e
TRUSTSTORE_PATH=/tmp/c2e_hono_truststore.pem
eval $(./setCloud2EdgeEnv.sh $RELEASE $NS $TRUSTSTORE_PATH)

minikube -p opentwins ssh -- sudo docker stats --no-stream

kubectl get pods -n opentwins
kubectl get services -n opentwins

##########################################################

minikube start --cpus 4 --disk-size 40gb --memory 8192 -p opentwins

minikube tunnel -p opentwins
minikube delete -p opentwins

NS=opentwins
RELEASE=c2e
kubectl create namespace $NS

helm install -n $NS --wait --timeout 20m \
  --set hono.useLoadBalancer=true \
  --set hono.kafka.externalAccess.broker.service.type=LoadBalancer \
  --set hono.kafka.externalAccess.controller.service.type=LoadBalancer \
  --set ditto.nginx.service.type=LoadBalancer \
  $RELEASE eclipse-iot/cloud2edge --debug

helm install -n $NS --wait --timeout 20m $RELEASE eclipse-iot/cloud2edge --debug

###########################################################

sudo apt-get update
sudo apt-get install nginx

### DITTO

sudo nano /etc/nginx/sites-available/minikube

server {
    listen 80;
    server_name 35.225.173.80;

    location / {
        proxy_pass http://10.100.254.252:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

sudo rm /etc/nginx/sites-enabled/minikube
sudo ln -s /etc/nginx/sites-available/minikube /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx

##### HONO HTTPS

sudo nano /etc/nginx/sites-available/c2e-hono-adapter-http

server {
    listen 8080;
    server_name 35.225.173.80;

    location / {
        proxy_pass https://10.105.26.23:8443;
        proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        proxy_ssl_verify off;  # Use with caution. In production, you should verify the SSL certificate.
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

sudo rm /etc/nginx/sites-enabled/c2e-hono-adapter-http
sudo ln -sf /etc/nginx/sites-available/c2e-hono-adapter-http /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx


## TEST

curl -i -k -u demo-device@org.eclipse.packages.c2e:demo-secret -H 'Content-Type: application/json' --data-binary '{
  "topic": "org.eclipse.packages.c2e/demo-device/things/twin/commands/modify",
  "headers": {},
  "path": "/features/temperature/properties/value",
  "value": 45
}' http://35.225.173.80:8080/telemetry


###### device registry

sudo nano /etc/nginx/sites-available/c2e-hono-service-device-registry-ext

server {
    listen 8085;
    server_name 35.225.173.80;

    location / {
        proxy_pass https://10.100.157.213:28443;
        proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        proxy_ssl_verify off;  # Use with caution. In production, you should verify the SSL certificate.
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

sudo rm /etc/nginx/sites-enabled/c2e-hono-service-device-registry-ext
sudo ln -sf /etc/nginx/sites-available/c2e-hono-service-device-registry-ext /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx

### TEST
curl -i -k -X POST http://35.225.173.80:8085/v1/devices/my-tenant/org.acme:my-device-1


##############################################################
##### c2e-hono-adapter-amqp
##### mqtt
##### kafka

sudo nano /etc/nginx/nginx.conf

# Stream module for TCP proxying
stream {
    upstream mqtt_backend {
        server 10.100.82.199:8883;
        # Add more servers if needed for load balancing
    }

    server {
        listen 8883;
        proxy_pass mqtt_backend;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        # Adjust timeouts as necessary
    }

    upstream  c2e-hono-adapter-amqp_backend {
        server 10.110.87.136:5671;
        # Add more servers if needed for load balancing
    }

    server {
        listen 8089;
        proxy_pass c2e-hono-adapter-amqp_backend;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        # Adjust timeouts as necessary
    }

    upstream  c2e-kafka-controller-0-external_backend {
        server 10.105.251.101:9094;
        # Add more servers if needed for load balancing
    }

    server {
        listen 8090;
        proxy_pass c2e-kafka-controller-0-external_backend;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        # Adjust timeouts as necessary
    }

}

sudo nginx -t

sudo systemctl restart nginx

sudo systemctl status nginx


#############################
# Stream module for TCP proxying
stream {
    # Upstream block for MQTT over TLS
    upstream mqtt_backend {
        server 10.107.136.108:8883;
        # Add more servers if needed for load balancing
    }

    server {
        listen 8883 ssl;
        proxy_pass mqtt_backend;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        
        # SSL/TLS settings (adjust as necessary)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_certificate /path/to/your/certificate.crt;   # Replace with the actual path
        ssl_certificate_key /path/to/your/certificate.key; # Replace with the actual path
    }

    # Upstream block for AMQP over TLS
    upstream c2e-hono-adapter-amqp_backend {
        server 10.106.169.86:5671;
        # Add more servers if needed for load balancing
    }

    server {
        listen 8081 ssl;
        proxy_pass c2e-hono-adapter-amqp_backend;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        
        # SSL/TLS settings (adjust as necessary)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_certificate /path/to/your/certificate.crt;   # Replace with the actual path
        ssl_certificate_key /path/to/your/certificate.key; # Replace with the actual path
    }
}
################################################


# Define the namespace and release variables
NS="opentwins"
RELEASE="c2e"
TRUSTSTORE_PATH="ca.crt"

# Extract the CA certificate from the ConfigMap and save it to my-ca.crt
kubectl get configmaps --namespace ${NS} ${RELEASE}-hono-example-trust-store --template="{{index .data \"ca.crt\"}}" > "ca.crt"

cat ca.crt

mosquitto_pub -d -h 35.225.173.80 -p 8883 -u demo-device@org.eclipse.packages.c2e -P demo-secret --cafile ./ca.crt --insecure -t telemetry -m '{
  "topic": "org.eclipse.packages.c2e/demo-device/things/twin/commands/modify",
  "headers": {},
  "path": "/features/temperature/properties/value",
  "value": 45
}'

###############################################